import telebot
import pytz
from datetime import datetime, timedelta
import threading
import time as sleep_time
import logging
import sqlite3
from contextlib import closing

DB_NAME = 'sleep_bot.db'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot('7898320721:AAHUS4O-bUMdn4JNT21OTPi4t3oXvBtB1Dk')


def init_db():
    with closing(sqlite3.connect(DB_NAME)) as conn:
        with conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    chat_id INTEGER NOT NULL,
                    sleep_time TEXT NOT NULL,
                    timezone TEXT NOT NULL,
                    streak INTEGER DEFAULT 0,
                    last_checkin_date TEXT,
                    last_check_date TEXT,
                    today_checked BOOLEAN DEFAULT 0
                )
            """)

init_db()


def get_user_data(user_id):
    with closing(sqlite3.connect(DB_NAME)) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        if row:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
            sleep_time_str = row[2] if row[2] else '00:00'  # –ï—Å–ª–∏ sleep_time –ø—É—Å—Ç–æ–π
            timezone_str = row[3] if row[3] else 'UTC+0'    # –ï—Å–ª–∏ timezone –ø—É—Å—Ç–æ–π
            streak = row[4] if row[4] else 0                # –ï—Å–ª–∏ streak –ø—É—Å—Ç–æ–π

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            try:
                if timezone_str.startswith('UTC'):
                    # –ü–∞—Ä—Å–∏–º —Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, UTC+3)
                    offset_str = timezone_str[3:]
                    if offset_str.startswith(('+', '-')):
                        offset = int(offset_str)
                    else:
                        offset = int(f"+{offset_str}")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
                    if offset == 0:
                        tz = pytz.UTC
                    else:
                        tz = pytz.timezone(f"Etc/GMT{'+' if offset < 0 else '-'}{abs(offset)}")
                else:
                    # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                    tz = pytz.timezone(timezone_str)
            except (ValueError, pytz.UnknownTimeZoneError):
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC
                tz = pytz.UTC

            return {
                'user_id': row[0],
                'chat_id': row[1],
                'sleep_time': datetime.strptime(sleep_time_str, '%H:%M').time(),
                'timezone': tz,
                'streak': streak,
                'last_checkin_date': datetime.strptime(row[5], '%Y-%m-%d').date() if row[5] else None,
                'last_check_date': datetime.strptime(row[6], '%Y-%m-%d').date() if row[6] else None,
                'today_checked': bool(row[7])
            }
        return None






def save_user_data(user_data):
    with closing(sqlite3.connect(DB_NAME)) as conn:
        with conn:
            tz = user_data['timezone']
            if isinstance(tz, pytz.tzinfo.BaseTzInfo):
                if hasattr(tz, 'zone'):
                    tz_str = tz.zone
                else:
                    # –î–ª—è FixedOffset
                    offset = tz._utcoffset.seconds // 3600 if tz._utcoffset else 0
                    tz_str = f"UTC{'+' if offset >=0 else ''}{offset}"
            else:
                tz_str = "UTC+0"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

            conn.execute("""
                INSERT OR REPLACE INTO users 
                (user_id, chat_id, sleep_time, timezone, streak, last_checkin_date, last_check_date, today_checked)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                user_data['user_id'],
                user_data['chat_id'],
                user_data['sleep_time'].strftime('%H:%M'),
                tz_str,
                user_data.get('streak', 0),
                user_data.get('last_checkin_date', '').isoformat() if user_data.get('last_checkin_date') else None,
                user_data.get('last_check_date', '').isoformat() if user_data.get('last_check_date') else None,
                int(user_data.get('today_checked', False))
            ))


def format_timezone_name(tz):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    if isinstance(tz, pytz._FixedOffset):
        # –î–ª—è FixedOffset
        offset = tz._offset.seconds // 3600
        return f"UTC{'+' if offset >=0 else ''}{offset}"
    elif hasattr(tz, 'zone'):
        # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
        return tz.zone
    return "UTC+0"

def reset_streak(user_id, notify=True):
    data = get_user_data(user_id)
    if data:
        data['streak'] = 0
        data['last_checkin_date'] = None
        save_user_data(data)
        if notify:
            bot.send_message(
                data['chat_id'],
                "üî¥ –°—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω! –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: 0",
                reply_markup=create_main_menu()
            )

def check_time_loop():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    while True:
        try:
            with closing(sqlite3.connect(DB_NAME)) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT user_id FROM users")
                for (user_id,) in cursor.fetchall():
                    try:
                        data = get_user_data(user_id)
                        if not data:
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        tz = data['timezone']
                        if not tz:
                            tz = pytz.UTC  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (UTC)
                            data['timezone'] = tz
                            save_user_data(data)

                        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_now = datetime.now(tz)
                        current_time = user_now.time()

                        # –í—Ä–µ–º—è —Å–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        sleep_time_obj = data['sleep_time']
                        today = user_now.date()

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ—á–∞—Ç—å—Å—è
                        if (current_time >= sleep_time_obj and
                                data.get('last_checkin_date') != today and
                                not data.get('today_checked', False)):
                            reset_streak(user_id, notify=True)
                            data['today_checked'] = True
                            save_user_data(data)

                        if today != data.get('last_check_date', datetime.min.date()):
                            data['today_checked'] = False
                            data['last_check_date'] = today
                            save_user_data(data)

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {user_id}: {e}")

            sleep_time.sleep(60)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            sleep_time.sleep(10)




def create_main_menu():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞",
        "üìä –ú–æ–π —Å—Ç—Ä–∏–∫",
        "‚ùó –°–±—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è",
    ]
    markup.add(*buttons)
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    msg = bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å? (–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM)",
        reply_markup=telebot.types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(msg, process_time_step)


def confirm_reset(message):
    if message.text.lower() in ["–¥–∞", "–¥–∞, —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]:
        reset_streak(message.from_user.id, notify=False)
        msg = bot.send_message(
            message.chat.id,
            "–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞ (HH:MM):",
            reply_markup=telebot.types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, process_time_step)
    else:
        show_main_menu(message.chat.id)


def process_time_step(message):
    try:
        if message.text.startswith('/'):
            raise ValueError

        sleep_time_obj = datetime.strptime(message.text, "%H:%M").time()
        user_data = {
            'user_id': message.from_user.id,
            'chat_id': message.chat.id,
            'sleep_time': sleep_time_obj,
            'timezone': pytz.UTC,  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
            'streak': 0,
            'last_checkin_date': None,
            'today_checked': False
        }
        save_user_data(user_data)

        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        timezones = ["UTC+3", "UTC+5", "UTC+6", "UTC+0", "–î—Ä—É–≥–æ–π"]
        for tz in timezones:
            markup.add(telebot.types.KeyboardButton(tz))

        msg = bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_timezone_step)
    except ValueError:
        msg = bot.send_message(
            message.chat.id,
            "‚õî –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:45)",
            reply_markup=telebot.types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, process_time_step)


def process_timezone_step(message):
    try:
        user_id = message.from_user.id
        tz_text = message.text.strip()
        data = get_user_data(user_id)

        if not data:
            logger.error(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            show_main_menu(message.chat.id)
            return

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_text}")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        tz_text = tz_text.replace(" ", "").upper()

        # –ï—Å–ª–∏ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not tz_text:
            tz_text = "UTC+0"
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {tz_text}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–º–µ—â–µ–Ω–∏–µ UTC –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        if tz_text.startswith("UTC") and len(tz_text) > 3:
            try:
                # –ü–∞—Ä—Å–∏–º —Å–º–µ—â–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å +5 –∏–ª–∏ -5)
                offset_str = tz_text[3:]
                if offset_str.startswith(('+', '-')):
                    offset = int(offset_str)
                else:
                    offset = int(f"+{offset_str}")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
                if offset == 0:
                    tz = pytz.UTC
                else:
                    tz = pytz.timezone(f"Etc/GMT{'+' if offset < 0 else '-'}{abs(offset)}")

                data['timezone'] = tz
                data['last_check_date'] = datetime.now(tz).date()
                save_user_data(data)

                logger.info(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {format_timezone_name(tz)}")
                bot.send_message(
                    message.chat.id,
                    f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
                    f"–í—Ä–µ–º—è —Å–Ω–∞: {data['sleep_time'].strftime('%H:%M')}\n"
                    f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {format_timezone_name(tz)}\n"
                    f"–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: 0",
                    reply_markup=create_main_menu()
                )
                return
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–º–µ—â–µ–Ω–∏—è: {e}")
                bot.send_message(
                    message.chat.id,
                    "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–º–µ—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                    reply_markup=telebot.types.ReplyKeyboardMarkup(
                        one_time_keyboard=True,
                        resize_keyboard=True
                    ).add(*[telebot.types.KeyboardButton(tz) for tz in ["UTC+3", "UTC+5", "UTC+6", "UTC+0", "–î—Ä—É–≥–æ–π"]])
                )
                bot.register_next_step_handler(message, process_timezone_step)
                return

        # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ UTC¬±HH, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        try:
            tz = pytz.timezone(tz_text)
            data['timezone'] = tz
            data['last_check_date'] = datetime.now(tz).date()
            save_user_data(data)

            logger.info(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {format_timezone_name(tz)}")
            bot.send_message(
                message.chat.id,
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
                f"–í—Ä–µ–º—è —Å–Ω–∞: {data['sleep_time'].strftime('%H:%M')}\n"
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {format_timezone_name(tz)}\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: 0",
                reply_markup=create_main_menu()
            )
        except pytz.UnknownTimeZoneError as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_text}, –æ—à–∏–±–∫–∞: {e}")
            bot.send_message(
                message.chat.id,
                "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=telebot.types.ReplyKeyboardMarkup(
                    one_time_keyboard=True,
                    resize_keyboard=True
                ).add(*[telebot.types.KeyboardButton(tz) for tz in ["UTC+3", "UTC+5", "UTC+6", "UTC+0", "–î—Ä—É–≥–æ–π"]])
            )
            bot.register_next_step_handler(message, process_timezone_step)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}", exc_info=True)
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (/start)"
        )


def process_custom_timezone(message):
    try:
        user_id = message.from_user.id
        tz_text = message.text.strip()
        data = get_user_data(user_id)

        if not data:
            show_main_menu(message.chat.id)
            return

        if tz_text.startswith("UTC"):
            offset = int(tz_text[3:])
            tz = pytz.FixedOffset(offset * 60)
        else:
            tz = pytz.timezone(tz_text)

        data['timezone'] = tz
        data['last_check_date'] = datetime.now(tz).date()
        save_user_data(data)

        bot.send_message(
            message.chat.id,
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            f"–í—Ä–µ–º—è —Å–Ω–∞: {data['sleep_time'].strftime('%H:%M')}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {format_timezone_name(tz)}\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: 0",
            reply_markup=create_main_menu()
        )

    except (pytz.UnknownTimeZoneError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ (/start)"
        )
        start(message)


def show_main_menu(chat_id):
    bot.send_message(
        chat_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu()
    )


@bot.message_handler(func=lambda m: m.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞")
def check_in(message):
    user_id = message.from_user.id
    data = get_user_data(user_id)

    if not data:
        bot.send_message(
            message.chat.id,
            "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è —Å–Ω–∞ —Å –ø–æ–º–æ—â—å—é /start",
            reply_markup=telebot.types.ReplyKeyboardRemove()
        )
        return

    try:
        tz = data['timezone']
        now = datetime.now(tz)
        current_time = now.time()
        sleep_time_obj = data['sleep_time']
        today = now.date()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞
        sleep_datetime = datetime.combine(today, sleep_time_obj)
        one_hour_before = (sleep_datetime - timedelta(hours=1)).time()
        one_hour_after = (sleep_datetime + timedelta(hours=1)).time()

        logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}, –≤—Ä–µ–º—è —Å–Ω–∞: {sleep_time_obj}, —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz}")
        logger.info(f"–ú–æ–∂–Ω–æ –æ—Ç–º–µ—á–∞—Ç—å—Å—è —Å {one_hour_before} –¥–æ {sleep_time_obj}")

        if one_hour_before <= current_time <= sleep_time_obj:
            if data.get('last_checkin_date') != today:
                data['streak'] = data.get('streak', 0) + 1
                data['last_checkin_date'] = today
                save_user_data(data)
                bot.send_message(
                    message.chat.id,
                    f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {data['streak']}",
                    reply_markup=create_main_menu()
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!",
                    reply_markup=create_main_menu()
                )
        elif current_time > sleep_time_obj:
            bot.send_message(
                message.chat.id,
                "‚è∞ –£–∂–µ –ø–æ–∑–¥–Ω–æ –æ—Ç–º–µ—á–∞—Ç—å—Å—è! –í—Ä–µ–º—è —Å–Ω–∞ –ø—Ä–æ—à–ª–æ.",
                reply_markup=create_main_menu()
            )
        else:
            bot.send_message(
                message.chat.id,
                f"‚è≥ –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ! –û—Ç–º–µ—á–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —Å {one_hour_before.strftime('%H:%M')} –¥–æ {sleep_time_obj.strftime('%H:%M')}",
                reply_markup=create_main_menu()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ: {e}", exc_info=True)
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_menu()
        )


@bot.message_handler(func=lambda m: m.text == "üìä –ú–æ–π —Å—Ç—Ä–∏–∫")
def show_streak(message):
    data = get_user_data(message.from_user.id)
    if not data:
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–∫–∞. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è —Å–Ω–∞ —Å –ø–æ–º–æ—â—å—é /start",
            reply_markup=telebot.types.ReplyKeyboardRemove()
        )
        return

    bot.send_message(
        message.chat.id,
        f"üìä –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {data.get('streak', 0)}\n"
        f"‚è∞ –í—Ä–µ–º—è —Å–Ω–∞: {data['sleep_time'].strftime('%H:%M')}\n"
        f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {format_timezone_name(data['timezone'])}",
        reply_markup=create_main_menu()
    )


@bot.message_handler(func=lambda m: m.text == "‚ùó –°–±—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è")
def change_settings(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–î–∞, —è –ø–æ–Ω–∏–º–∞—é"))
    markup.add(telebot.types.KeyboardButton("–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å"))

    bot.send_message(
        message.chat.id,
        "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∏—Ç –≤–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, confirm_settings_change)


def confirm_settings_change(message):
    if message.text.lower() in ["–¥–∞", "–¥–∞, —è –ø–æ–Ω–∏–º–∞—é"]:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        with closing(sqlite3.connect(DB_NAME)) as conn:
            with conn:
                conn.execute("DELETE FROM users WHERE user_id = ?", (message.from_user.id,))

        msg = bot.send_message(
            message.chat.id,
            "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞ (HH:MM):",
            reply_markup=telebot.types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, process_time_step)
    else:
        show_main_menu(message.chat.id)


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
threading.Thread(target=check_time_loop, daemon=True).start()

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    bot.polling(none_stop=True)