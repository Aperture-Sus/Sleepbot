import telebot
import pytz
from datetime import datetime, time, timedelta, timezone
import threading
import time as sleep_time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot("7898320721:AAHUS4O-bUMdn4JNT21OTPi4t3oXvBtB1Dk")

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


def format_timezone_name(tz):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    if isinstance(tz, pytz._FixedOffset):
        offset = tz.utcoffset(None).total_seconds() / 3600
        return f"UTC{'+' if offset >= 0 else ''}{int(offset)}"
    return tz.zone


def reset_streak(user_id):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_data:
        user_data[user_id]['streak'] = 0
        user_data[user_id]['last_checkin_date'] = None
        bot.send_message(
            user_data[user_id]['chat_id'],
            f"üî¥ –°—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω! –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: 0",
            reply_markup=create_main_menu()
        )


def check_time_loop():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    while True:
        try:
            now_utc = datetime.now(timezone.utc)

            for user_id, data in list(user_data.items()):
                if 'timezone' not in data:
                    continue

                try:
                    tz = data['timezone']
                    user_now = datetime.now(tz)
                    current_time = user_now.time()
                    sleep_time_obj = data['sleep_time']
                    today = user_now.date()

                    # +++ –ó–ê–ú–ï–ù–Ø–ï–ú –£–°–õ–û–í–ò–ï –ù–ê –≠–¢–û +++
                    if (current_time >= sleep_time_obj and
                            data.get('last_checkin_date') != today and
                            not data.get('today_checked', False)):
                        reset_streak(user_id)
                        bot.send_message(
                            data['chat_id'],
                            "‚è∞ –í—Ä–µ–º—è —Å–Ω–∞ –ø—Ä–æ—à–ª–æ! –í—ã –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è. –°—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞!"
                        )
                        data['today_checked'] = True

                    # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –Ω–æ–≤–æ–º –¥–Ω–µ
                    if today != data.get('last_check_date', datetime.min.date()):
                        data['today_checked'] = False
                        data['last_check_date'] = today

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {user_id}: {e}")

            sleep_time.sleep(60)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            sleep_time.sleep(10)


@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.id in user_data:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(telebot.types.KeyboardButton("–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"))
        markup.add(telebot.types.KeyboardButton("–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å"))

        msg = bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, confirm_reset)
        return

    msg = bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å? (–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM)",
        reply_markup=telebot.types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(msg, process_time_step)


def confirm_reset(message):
    if message.text.lower() == "–¥–∞, —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        reset_streak(message.from_user.id)
        bot.send_message(
            message.chat.id,
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: 0",
            reply_markup=telebot.types.ReplyKeyboardRemove()
        )
        start(message)
    else:
        show_main_menu(message.chat.id)


def process_time_step(message):
    try:
        sleep_time_obj = datetime.strptime(message.text, "%H:%M").time()
        user_data[message.from_user.id] = {
            'sleep_time': sleep_time_obj,
            'chat_id': message.chat.id,
            'streak': 0,
            'last_checkin_date': None,
            'today_checked': False
        }

        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        timezones = ["UTC+3", "UTC+5", "UTC+6", "UTC+0", "–î—Ä—É–≥–æ–π"]
        for tz in timezones:
            markup.add(telebot.types.KeyboardButton(tz))

        msg = bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_timezone_step)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM"
        )
        start(message)


def process_timezone_step(message):
    try:
        user_id = message.from_user.id
        tz_text = message.text.strip()

        if tz_text == "–î—Ä—É–≥–æ–π":
            msg = bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä UTC+5 –∏–ª–∏ Asia/Almaty):",
                reply_markup=telebot.types.ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(msg, process_custom_timezone)
            return

        if tz_text.startswith("UTC"):
            offset = int(tz_text[3:])
            tz = pytz.FixedOffset(offset * 60)
        else:
            tz = pytz.timezone(tz_text)

        user_data[user_id]['timezone'] = tz
        user_data[user_id]['last_check_date'] = datetime.now(tz).date()

        bot.send_message(
            message.chat.id,
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            f"–í—Ä–µ–º—è —Å–Ω–∞: {user_data[user_id]['sleep_time'].strftime('%H:%M')}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {format_timezone_name(tz)}\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: 0",
            reply_markup=create_main_menu()
        )

    except (pytz.UnknownTimeZoneError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        bot.send_message(
            message.chat.id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
        )
        start(message)


def process_custom_timezone(message):
    try:
        user_id = message.from_user.id
        tz_text = message.text.strip()

        if tz_text.startswith("UTC"):
            offset = int(tz_text[3:])
            tz = pytz.FixedOffset(offset * 60)
        else:
            tz = pytz.timezone(tz_text)

        user_data[user_id]['timezone'] = tz
        user_data[user_id]['last_check_date'] = datetime.now(tz).date()

        bot.send_message(
            message.chat.id,
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            f"–í—Ä–µ–º—è —Å–Ω–∞: {user_data[user_id]['sleep_time'].strftime('%H:%M')}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {format_timezone_name(tz)}\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: 0",
            reply_markup=create_main_menu()
        )

    except (pytz.UnknownTimeZoneError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ (/start)"
        )
        start(message)


def create_main_menu():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞"))
    markup.add(telebot.types.KeyboardButton("üìä –ú–æ–π —Å—Ç—Ä–∏–∫"))
    markup.add(telebot.types.KeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"))
    return markup


def show_main_menu(chat_id):
    bot.send_message(
        chat_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_menu()
    )


@bot.message_handler(func=lambda m: m.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞")
def check_in(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        bot.send_message(
            message.chat.id,
            "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è —Å–Ω–∞ —Å –ø–æ–º–æ—â—å—é /start",
            reply_markup=telebot.types.ReplyKeyboardRemove()
        )
        return

    data = user_data[user_id]
    tz = data['timezone']
    now = datetime.now(tz)
    current_time = now.time()
    sleep_time_obj = data['sleep_time']

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞
    one_hour_before = (datetime.combine(now.date(), sleep_time_obj) - timedelta(hours=1)).time()
    checkin_window_start = one_hour_before
    checkin_window_end = sleep_time_obj

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    if checkin_window_start <= current_time < checkin_window_end:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –æ—Ç–º–µ—á–∞–ª–∏—Å—å
        if data.get('last_checkin_date') != now.date():
            data['streak'] = data.get('streak', 0) + 1
            data['last_checkin_date'] = now.date()
            bot.send_message(
                message.chat.id,
                f"‚úÖ –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {data['streak']}",
                reply_markup=create_main_menu()
            )
        else:
            bot.send_message(
                message.chat.id,
                "–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!",
                reply_markup=create_main_menu()
            )
    elif current_time >= checkin_window_end:
            bot.send_message(
                message.chat.id,
                "‚è∞ –£–∂–µ –ø–æ–∑–¥–Ω–æ –æ—Ç–º–µ—á–∞—Ç—å—Å—è! –í—Ä–µ–º—è —Å–Ω–∞ –ø—Ä–æ—à–ª–æ.",
                reply_markup=create_main_menu()
            )
    else:
        bot.send_message(
            message.chat.id,
            f"‚è≥ –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ! –û—Ç–º–µ—á–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –∑–∞ 1 —á–∞—Å –¥–æ —Å–Ω–∞ ({checkin_window_start.strftime('%H:%M')}-{sleep_time_obj.strftime('%H:%M')})",
            reply_markup=create_main_menu()
        )


@bot.message_handler(func=lambda m: m.text == "üìä –ú–æ–π —Å—Ç—Ä–∏–∫")
def show_streak(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        bot.send_message(
            message.chat.id,
            "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è —Å–Ω–∞ —Å –ø–æ–º–æ—â—å—é /start",
            reply_markup=telebot.types.ReplyKeyboardRemove()
        )
        return

    data = user_data[user_id]
    bot.send_message(
        message.chat.id,
        f"üìä –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {data.get('streak', 0)}\n"
        f"‚è∞ –í—Ä–µ–º—è —Å–Ω–∞: {data['sleep_time'].strftime('%H:%M')}\n"
        f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {format_timezone_name(data['timezone'])}",
        reply_markup=create_main_menu()
    )


@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
def change_settings(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–î–∞, —è –ø–æ–Ω–∏–º–∞—é"))
    markup.add(telebot.types.KeyboardButton("–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å"))

    bot.send_message(
        message.chat.id,
        "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–±—Ä–æ—Å–∏—Ç –≤–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, confirm_settings_change)


def confirm_settings_change(message):
    if message.text.lower() == "–¥–∞, —è –ø–æ–Ω–∏–º–∞—é":
        reset_streak(message.from_user.id)
        bot.send_message(
            message.chat.id,
            "–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Å–Ω–∞ (HH:MM):",
            reply_markup=telebot.types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(message, process_time_step)
    else:
        show_main_menu(message.chat.id)


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
threading.Thread(target=check_time_loop, daemon=True).start()

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    bot.polling(none_stop=True)